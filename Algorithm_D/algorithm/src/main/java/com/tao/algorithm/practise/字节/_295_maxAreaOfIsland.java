/**
 * @ClassName:
 * @Description:
 * @author taowei
 * @version V1.0
 * @Date
 */

package com.tao.algorithm.practise.字节;

/**
 *
 * 695. 岛屿的最大面积
 *
 * 给定一个包含了一些 0 和 1 的非空二维数组 grid 。
 *
 * 一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。
 *
 * 找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)
 *
 * 示例 1:
 *
 * [[0,0,1,0,0,0,0,1,0,0,0,0,0],
 *  [0,0,0,0,0,0,0,1,1,1,0,0,0],
 *  [0,1,1,0,1,0,0,0,0,0,0,0,0],
 *  [0,1,0,0,1,1,0,0,1,0,1,0,0],
 *  [0,1,0,0,1,1,0,0,1,1,1,0,0],
 *  [0,0,0,0,0,0,0,0,0,0,1,0,0],
 *  [0,0,0,0,0,0,0,1,1,1,0,0,0],
 *  [0,0,0,0,0,0,0,1,1,0,0,0,0]]
 * 对于上面这个给定矩阵应返回 6。注意答案不应该是 11
 * ，因为岛屿只能包含水平或垂直的四个方向的 1 。
 *
 *
 *
 */
class _295_maxAreaOfIsland {
    public static void main(String[] args) {

    }

    /**
     * 给定一个包含了一些 00 和 11 的非空二维数组 grid，一个 岛屿 是由四个方向
     * (水平或垂直) 的 11 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。
     * 由于每个岛屿皆被水包围，所以，仅需要确保每一次寻找到新岛屿时，
     * 所测量到的岛屿面积为该岛屿的最大面积，最后返回所测所有岛屿中的最大面积即可。
     *
     * 由于并不知道如何才可以测量出岛屿的面积，所以为了测量整个岛屿的面积，
     * 只能采取一步步探索的方式：
     *
     * 当登陆某个岛屿后，以此时所处位置为行动中心，随后分别向 东、南、西、北 四个方向前进。
     * 如果向某一方向前进后其为水或登记的地方则停止探索，而当步入新地点时，
     * 则继续以当前所处位置为行动中心，随后再一次向 东、南、西、北 四个方向前进，以此类推。
     *
     * @param grid
     * @return
     */
    public static int maxAreaOfIsland(int[][] grid) {
        int ans = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                ans = Math.max(ans,area(grid,i,j));
            }
        }
        return ans;
    }

    public static int area(int[][] grid, int i, int j) {
        if(i < 0 || j < 0 || i == grid.length || j == grid[i].length
                || grid[i][j] == 0) {
            return 0;
        }
        grid[i][j] = 0;
        return 1 + area(grid,i,j - 1) + area(grid,i,j + 1)
                + area(grid,i - 1,j) + area(grid,i + 1 ,j);
    }
}

